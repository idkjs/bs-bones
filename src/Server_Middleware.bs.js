// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Prom = require("bs-prom/src/Prom.bs.js");
var Util = require("util");
var Curry = require("bs-platform/lib/js/curry.js");
var Express = require("bs-express/src/Express.bs.js");
var Express$1 = require("express");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Server_ExpressExt = require("./Server_ExpressExt.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var Types = {};

function toString(whatever) {
  return Util.inspect(whatever, {
              depth: 100
            });
}

function _middlewareToExpressMiddleware(handler) {
  return Express.PromiseMiddleware.from(function (param, req, res) {
              return Prom.$$catch(Prom.map(Curry._3(handler, req, res, undefined), (function (resp) {
                                return resp._0;
                              })), (function (err) {
                            console.log("An unexpected error was thrown inside of the handler", err);
                            return Prom.wrap(Express.$$Response.sendStatus(/* InternalServerError */47)(res));
                          }));
            });
}

function _handlerToMiddleware(handler, req, res, ctx) {
  return Prom.map(Curry._3(handler, req, res, ctx), (function (a) {
                return {
                        TAG: /* Ok */0,
                        _0: a
                      };
              }));
}

var Private = {
  toString: toString,
  _middlewareToExpressMiddleware: _middlewareToExpressMiddleware,
  _handlerToMiddleware: _handlerToMiddleware
};

function middlewareFromExpress(em, req, res, a) {
  var match = Prom.make(undefined);
  var resolve = match[1];
  var next = function (err) {
    if (err !== undefined) {
      console.log("Failure from wrapped express middleware", Caml_option.valFromOption(err));
      return Curry._1(resolve, {
                  TAG: /* Error */1,
                  _0: Express.$$Response.sendStatus(/* InternalServerError */47)(res)
                });
    } else {
      return Curry._1(resolve, {
                  TAG: /* Ok */0,
                  _0: a
                });
    }
  };
  Curry._3(em, req, res, next);
  return match[0];
}

var Compat = {
  middlewareFromExpress: middlewareFromExpress
};

var Options = {};

var JsonMiddleware = {
  Options: Options
};

function bodyAsJson(size) {
  var partial_arg = Express$1.json({
        type: (function (param) {
            return true;
          }),
        limit: size
      });
  return function (param, param$1, param$2) {
    return middlewareFromExpress(partial_arg, param, param$1, param$2);
  };
}

var safeJson = bodyAsJson(5242880);

var bigJson = bodyAsJson(104857600);

function requireQuery(decoder, req, res, ctxBuilder) {
  var thing;
  try {
    thing = Curry._1(decoder, Server_ExpressExt.queryJson(req));
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    return Prom.wrapError(Express.$$Response.sendString("Could not decode expected params from query string:" + toString(e), Express.$$Response.status(/* BadRequest */19)(res)));
  }
  return Prom.wrapOk(Curry._1(ctxBuilder, thing));
}

function requireParams(decoder, req, res, ctxBuilder) {
  var paramsAsJson = Express.$$Request.params(req);
  var thing;
  try {
    thing = Curry._1(decoder, paramsAsJson);
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    return Prom.wrapError(Express.$$Response.sendString("Could not decode expected params from the URL path:" + toString(e), Express.$$Response.status(/* BadRequest */19)(res)));
  }
  return Prom.wrapOk(Curry._1(ctxBuilder, thing));
}

function requireBody(decoder, req, res, ctxBuilder) {
  var rawBodyJson = Express.$$Request.bodyJSON(req);
  if (rawBodyJson === undefined) {
    return Prom.wrapError(Express.$$Response.sendString("Body Required", Express.$$Response.status(/* BadRequest */19)(res)));
  }
  var rawBodyJson$1 = Caml_option.valFromOption(rawBodyJson);
  var decodedBody;
  try {
    decodedBody = Curry._1(decoder, rawBodyJson$1);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    if (err.RE_EXN_ID === Json_decode.DecodeError) {
      console.log("Error decoding expected body", rawBodyJson$1);
      return Prom.wrapError(Express.$$Response.sendString("Error decoding body: " + err._1, Express.$$Response.status(/* BadRequest */19)(res)));
    }
    throw err;
  }
  return Prom.wrapOk(Curry._1(ctxBuilder, decodedBody));
}

function requireToken(req, res, ctxBuilder) {
  var header = Express.$$Request.get("Authorization", req);
  if (header !== undefined) {
    return Prom.wrapOk(Curry._1(ctxBuilder, header));
  } else {
    return Prom.wrapError(Express.$$Response.sendString("Must include an Authorization header.", Express.$$Response.status(/* Unauthorized */20)(res)));
  }
}

function startWith(ctxBuilder, _req, _res, param) {
  return Prom.wrap({
              TAG: /* Ok */0,
              _0: ctxBuilder
            });
}

function just(m, req, res, param) {
  return Curry._3(m, req, res, (function (a) {
                return a;
              }));
}

function andThen(m, m2, req, res, a) {
  return Prom.flatMap(Curry._3(m, req, res, a), (function (context) {
                if (context.TAG === /* Ok */0) {
                  return Curry._3(m2, req, res, context._0);
                } else {
                  return Prom.wrap({
                              TAG: /* Error */1,
                              _0: context._0
                            });
                }
              }));
}

function andThenHandle(middleware, handler) {
  return _middlewareToExpressMiddleware(function (param, param$1, param$2) {
              return andThen(middleware, (function (param, param$1, param$2) {
                            return _handlerToMiddleware(handler, param, param$1, param$2);
                          }), param, param$1, param$2);
            });
}

function handle(handler) {
  return _middlewareToExpressMiddleware(function (param, param$1, param$2) {
              return _handlerToMiddleware(handler, param, param$1, param$2);
            });
}

var Composers = {
  startWith: startWith,
  just: just,
  andThen: andThen,
  andThenHandle: andThenHandle,
  handle: handle
};

function none(param, param$1, param$2) {
  return Prom.wrap({
              TAG: /* Ok */0,
              _0: undefined
            });
}

exports.Types = Types;
exports.Private = Private;
exports.Compat = Compat;
exports.middlewareFromExpress = middlewareFromExpress;
exports.JsonMiddleware = JsonMiddleware;
exports.bodyAsJson = bodyAsJson;
exports.safeJson = safeJson;
exports.bigJson = bigJson;
exports.requireQuery = requireQuery;
exports.requireParams = requireParams;
exports.requireBody = requireBody;
exports.requireToken = requireToken;
exports.Composers = Composers;
exports.startWith = startWith;
exports.just = just;
exports.andThen = andThen;
exports.andThenHandle = andThenHandle;
exports.handle = handle;
exports.none = none;
/* safeJson Not a pure module */
