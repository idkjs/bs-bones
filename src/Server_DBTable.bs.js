// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Prom = require("bs-prom/src/Prom.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Server_Log = require("./Server_Log.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Server_Decode = require("./Server_Decode.bs.js");
var Server_DBBricks = require("./Server_DBBricks.bs.js");
var Server_DBAbstract = require("./Server_DBAbstract.bs.js");
var SqlBricksPostgres = require("sql-bricks-postgres");

function getPgPath(path) {
  return "{" + (Belt_List.toArray(path).join(",") + "}");
}

function getStack(param) {
  var error = (new Error());
  return Belt_Option.getWithDefault(error.stack, "No trace could be provided");
}

var Utils = {
  getPgPath: getPgPath,
  getStack: getStack
};

function Table(CFG) {
  var select = function (columns) {
    return SqlBricksPostgres.select(columns).from(CFG.name);
  };
  var selectIn = function (column, path) {
    return SqlBricksPostgres.select(column + ("#>" + getPgPath(path))).from(CFG.name);
  };
  var update = function (vs) {
    return Server_DBBricks.update(CFG.name, vs);
  };
  var updateJson = function (vs) {
    return Server_DBBricks.updateJson(CFG.name, vs);
  };
  var setIn = function (column, path, value) {
    return SqlBricksPostgres.updateTableOnly(CFG.name).set(column, SqlBricksPostgres("jsonb_set($1, $2, $3)", ({
                      NAME: "Three",
                      VAL: [
                        column,
                        getPgPath(path),
                        value
                      ]
                    }).VAL));
  };
  var _insert = function (vs) {
    return Server_DBBricks.anyValue(SqlBricksPostgres.insertInto(CFG.name), vs);
  };
  var _upsert = function (vs) {
    return Server_DBBricks.anyValue(SqlBricksPostgres.insertInto(CFG.name), vs).onConflict("id").doUpdate();
  };
  var $$delete = function (param) {
    return SqlBricksPostgres.delete().from(CFG.name);
  };
  var perform = function (builder, decoder) {
    return Prom.Infix.$less$bang$great(Prom.Infix.$less$$great(Prom.Infix.$less$bang$great(Server_DBAbstract.perform(CFG.pool, builder), (function (err) {
                          return Server_Log.error3("Failed DB request", getStack(undefined), err);
                        })), (function (param) {
                      return Server_Decode.decode(decoder, param);
                    })), (function (err) {
                  return Server_Log.error3("Failed to decode from database", getStack(undefined), err);
                }));
  };
  var maybeOne = function (builder, decoder) {
    return Prom.Infix.$less$bang$great(Prom.Infix.$less$$great(Prom.Infix.$less$bang$great(Server_DBAbstract.perform(CFG.pool, builder), (function (err) {
                          return Server_Log.error3("Failed DB request", getStack(undefined), err);
                        })), (function (param) {
                      return Server_Decode.decode((function (param) {
                                    return Server_Decode.maybeFirst(decoder, param);
                                  }), param);
                    })), (function (err) {
                  return Server_Log.error3("Failed to decode from database", getStack(undefined), err);
                }));
  };
  var one = function (builder, decoder) {
    return Prom.Infix.$less$bang$great(Prom.Infix.$less$$great(Prom.Infix.$less$bang$great(Server_DBAbstract.perform(CFG.pool, builder), (function (err) {
                          return Server_Log.error3("Failed DB request", getStack(undefined), err);
                        })), (function (param) {
                      return Server_Decode.decode((function (param) {
                                    return Server_Decode.first(decoder, param);
                                  }), param);
                    })), (function (err) {
                  return Server_Log.error3("Failed to decode from database", getStack(undefined), err);
                }));
  };
  return {
          Bricks: undefined,
          whereOpt: Server_DBBricks.Filters.whereOpt,
          select: select,
          selectIn: selectIn,
          update: update,
          updateJson: updateJson,
          setIn: setIn,
          _insert: _insert,
          insert: _insert,
          insertJson: _insert,
          _upsert: _upsert,
          upsert: _upsert,
          upsertJson: _upsert,
          $$delete: $$delete,
          perform: perform,
          maybeOne: maybeOne,
          one: one
        };
}

exports.Utils = Utils;
exports.Table = Table;
/* Server_Log Not a pure module */
